#print('beginning of file')
import pprint
pp = pprint.PrettyPrinter(width=41, compact=True) 
import subprocess as sp
import tempfile
import yaml
import json
import string
import itertools
import time 
def dict_product(dicts):
	#https://stackoverflow.com/questions/11277432/how-to-remove-a-key-from-a-python-dictionary
    return (dict(zip(dicts, x)) for x in itertools.product(*dicts.values()))

## use a json to layout integration configs
def parse_integration_config(file, output_string, which_partitions):
	file_string = output_string
	rule_output =[]
	with open(file) as cfg_file:
		iconfig = json.load(cfg_file)
	gparam_dict={} 
	for key in iconfig['global_default']:
		gparam_dict[key] = iconfig['global_default'][key]
	
	for partition in which_partitions:
		default_params = gparam_dict.copy()
		## load default params and generate strings
		for param in iconfig[partition]['default']:
			default_params[param] = iconfig[partition]['default'][param]
		# for paritions that all have the same methods, ie subset clustering, its easier 
		# to add partition back to the default. 
		# This is so we dont over write it by accident
		if 'partition' not in default_params:
			default_params['partition'] = [partition]
		rule_output+=[file_string.format_map(dp) for dp in dict_product(default_params) ]
		## generate outptut for method with alternate params
		if len(iconfig[partition].keys()) > 1: # multiple methods
			methods = [m for m in iconfig[partition].keys() if m!= 'default']
			for method in methods:
				#reset default back to base for this
				base_default_params = default_params.copy()
				for param in iconfig[partition][method]:
					base_default_params[param] = iconfig[partition][method][param]
				# overwrite previous method
				base_default_params['method'] = [method]
				rule_output+=[file_string.format_map(dp) for dp in dict_product(base_default_params)]
	return rule_output

RSON_TEMP_DIR=config['rson_temp_dir']
## make sure lambda is in this order when using-  lambda wildcards, input, output
sp.run(f'mkdir -p {RSON_TEMP_DIR}',shell=True)
def export_rule_info(**kwargs):#
    with tempfile.NamedTemporaryFile( mode= 'w+',  prefix =RSON_TEMP_DIR, suffix ='.json', delete=False) as outjson:
        json.dump(kwargs, outjson)
        return outjson.name



# ALL_INTEGRATION_PARAMS = list(iconfig['global_default'].keys())
# for partition in iconfig.keys():
# 	if 'default' in  iconfig[partition]:
# 		for method in iconfig[partition].keys()
# 			ALL_INTEGRATION_PARAMS+=list(iconfig[partition][method].keys())
# ALL_INTEGRATION_PARAMS = 

def make_wc_string(pfx, wildcards, sfx, skip_db=None):
	## create a string with bracketed wildcards
	## skip_db - enable compatibility with expand:
	##   set skip_db to wc's that will be filled with expand, and then pass 
	##	 output to expand
	if skip_db is not None:
		lbr = '-{{'
		rbr = '}}__'
	else:
		lbr = '-{'
		rbr = '}__'
		skip_db=[]
	for wc in wildcards:
		if wc in skip_db:
			lbr = '-{'
			rbr = '}__'
		wc_str = wc + lbr + wc + rbr 
		pfx+= wc_str
	return pfx + sfx

git_dir = config['git_dir']
bustools_path = config['bustools_path']
working_dir = config['working_dir']
conda_dir = config['conda_dir']
fastq_path = config['fastq_path']
fi_tsne_dir = config['fi_tsne_dir']
quant_path = config['quant_path']
config_abspath=config['config_abspath']
pattern_file=config['samplename_patterns']

method = ['scArches', 'bbknn','insct','magic', 'scVI','CCA', 'scanorama', 'harmony', 'fastMNN', 'combat', 'none', 'liger']
transform = ['libSize', 'sqrt', 'counts','standard', 'SCT','scran']
covariate = ['study_accession', 'batch']
organism = ['Mus_musculus', 'Macaca_fascicularis', 'Homo_sapiens']
dims = [4,6,8,10,15, 20,25,30,50,75,100,200]
epochs = [5,10,25,50,100]

knn = [0.2,0,4,0.6, 5, 7, 10, 15, 20, 30]
report: "report.rst"

partitions_to_run = config['partition']
scIB_partitions_to_run =  config['scIB_partition'] 


if not config['skip_CT_learning']:
	skip_CT_learning = 'no'
else: 
	skip_CT_learning = config['skip_CT_learning']


if skip_CT_learning.lower()  == 'yes':
	rule all:
		input:
			'pipeline_data/results/merged_stats.Rdata',
else:
	rule all:
		input:
			'pipeline_data/results/merged_xgboost.Rdata',
			'pipeline_data/results/merged_stats.Rdata',
			"seurat_obj/raw/n_features-1000__transform-counts__partition-raw__covariate-" + config['covariate'] + "__preFilter.seuratV3.Rdata"

rule label_known_cells_with_type:
	input:
		'pipeline_data/cell_info/all_cell_info.tsv',
		config['srr_sample_file']		
	output:
		'pipeline_data/cell_info/cell_info_labelled.Rdata'
	shell:
		"""
		module load R/3.6
		export SCIAD_GIT_DIR={git_dir}
		export SCIAD_CONFIG={config_abspath}
		Rscript {git_dir}/src/label_known_cells.R 
		"""

def get_fsm(parti):
	if parti in ['Homo_sapiens', "Mus_musculus"]:
		return f'pipeline_data/clean_quant/{parti}/full_sparse_matrix.Rdata' # species specific quant 
	else:
		return 'pipeline_data/clean_quant/all_species_full_sparse_matrix.Rdata'




'''
integration parameter inheritance. Adding a wildcard upstream will add it for ALL rules below it 
seu_obj_param|
			 |-> intg_obj_param == phate_obj_param
			 				   |-> umap_obj_param| 
												 |->extr_umap_param ==  mk_h5ad_param == perf_met_param== q_traj_param == scIB_param == centrality*
							   |-> tsne_obj_param == extr_tsne_param
							   |-> clst_obj_param == extr_clst_param 

'''


seu_obj_pfx ='seurat_obj/raw/'
seu_obj_param =['n_features','transform','partition', 'covariate']
seu_obj_sfx = 'preFilter.seuratV3.Rdata'


def pick_quant(partition):
	if 'universe' in partition:
		return 'pipeline_data/clean_quant/all_species_full_sparse_matrix.Rdata'
	elif 'human' in partition:
		return 'pipeline_data/clean_quant/Homo_sapiens/full_sparse_matrix.Rdata'
	elif 'chick' in partition:
		return 'pipeline_data/clean_quant/Gallus_gallus/full_sparse_matrix.Rdata'
	elif 'mouse' in partition:
		return 'pipeline_data/clean_quant/Mus_musculus/full_sparse_matrix.Rdata'
	elif 'macaque' in partition:
		return 'pipeline_data/clean_quant/Macaca_fascicularis/full_sparse_matrix.Rdata'
	else:
		return 'pipeline_data/clean_quant/all_species_full_sparse_matrix.Rdata'

def pick_mito(partition):
	if 'human' in partition:
		return 'references/mito_genes/hs-homo_sapiens_mitogenes.txt' 
	elif 'chick' in partition:
		return 'references/mito_genes/gg-gallus_gallus_mitogenes.txt'
	elif 'mouse' in partition:
		return 'references/mito_genes/mm-mus_musculus_mitogenes.txt'
	elif 'macaque' in partition:
		return 'references/mito_genes/hs-homo_sapiens_mitogenes.txt' 
	else:
		return 'references/mito_genes/hs-homo_sapiens_mitogenes.txt'

rule make_seurat_objs:
	input:
		cell_info = 'pipeline_data/cell_info/all_cell_info.tsv',
		quant_file = lambda wildcards: pick_quant(wildcards.partition),
		#all_species_quant_file = 'pipeline_data/clean_quant/all_species_full_sparse_matrix.Rdata',
		labelled_cell_info = 'pipeline_data/cell_info/cell_info_labelled.Rdata',
		HVG_var_names = config['HVG_var_names'],
		mitogene_list = lambda wildcards: pick_mito(wildcards.partition), # created by SnakeQUANT
		sample_meta = config['srr_sample_file']
	output:
		seurat = make_wc_string(seu_obj_pfx, seu_obj_param, seu_obj_sfx)
	params:
		rson = lambda wildcards, input, output: export_rule_info(input = dict(input), output=dict(output), wildcards = dict(wildcards))
	shell:
		"""
		module load R/3.6
		export SCIAD_GIT_DIR={git_dir}
		export SCIAD_CONFIG={config_abspath}
		Rscript {git_dir}/src/build_seurat_obj_classic.R {params.rson} {config_abspath}
		"""
h5ad_rawobj_pfx = 'h5ad/raw/'
h5ad_rawobj_param = ['n_features','transform','partition', 'covariate']
h5ad_rawobj_sfx = 'preFilter.anndata.h5ad'

rule make_rawh5ad_objs:
	input:
		seurat = make_wc_string(seu_obj_pfx, seu_obj_param, seu_obj_sfx)
	output:
		h5ad = make_wc_string(h5ad_rawobj_pfx, h5ad_rawobj_param, h5ad_rawobj_sfx)
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
        export SCIAD_GIT_DIR={git_dir}
        export SCIAD_CONFIG={config_abspath}
		Rscript {git_dir}/src/seurat_to_h5ad_core.R {input} seurat__standard {output} NO
		"""

intg_obj_pfx ='seurat_obj/integrated/'
intg_obj_param = seu_obj_param + ['method', 'dims', 'epochs']
intg_obj_sfx = 'preFilter.seuratV3.Rdata'


def which_method(p):
	if p == 'scVI':
		return 'merge_methods.R'
	elif p == 'ldvae':
		return 'merge_methods_ldvae.R'
	else:
		return 'merge_methods.R'

ref_samples = config['ref_samples']
rule integrate_00:
	input:
		cell_label_info = 'pipeline_data/cell_info/cell_info_labelled.Rdata',
		obj = make_wc_string(seu_obj_pfx, seu_obj_param, seu_obj_sfx),
		h5ad = make_wc_string(h5ad_rawobj_pfx, h5ad_rawobj_param, h5ad_rawobj_sfx),
		pattern = pattern_file,
		ref = ref_samples	
	output:
		make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx)
	params:
		mm = lambda wildcards: which_method(wildcards.method),
		model = directory('pipeline_data/model/n_features-{n_features}__transform-{transform}__partition-{partition}__covariate-{covariate}__method-{method}__dims-{dims}__epochs-{epochs}')
	resources: integration_gpu=1
	threads: 2 	
	shell:
		"""

		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		export SCIAD_GIT_DIR={git_dir}
		export SCIAD_CONFIG={config_abspath}
		cmd="Rscript {git_dir}/src/{params.mm} \
				  {wildcards.method} \
				  {wildcards.transform} \
				  {wildcards.covariate} \
				  {wildcards.dims} \
				  {input.obj} \
				  {output} \
				  {wildcards.epochs} \
				  {input.pattern} \
				  {ref_samples} \
				  {params.model} "
		
		echo $cmd
		eval $cmd
		"""

umap_obj_pfx ='seurat_obj/integrated/'
umap_obj_param =intg_obj_param + ['dist', 'neighbors']
umap_obj_sfx = 'umap.seuratV3.Rdata'	
rule calculate_umap:
	input:
		obj = make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx)
	output:
		make_wc_string(umap_obj_pfx, umap_obj_param, umap_obj_sfx)
	threads: 4
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		export SCIAD_GIT_DIR={git_dir}
		Rscript {git_dir}/src/calculate_umap_and_cluster.R \
			{wildcards.method} {wildcards.dims} {wildcards.dist} {wildcards.neighbors} 1 FALSE TRUE {input} {output}
		"""

tsne_obj_pfx ='seurat_obj/integrated/'
tsne_obj_param = intg_obj_param + ['perplexity']
tsne_obj_sfx = 'tsne.seuratV3.Rdata'

rule calculate_tsne:
	input:
		obj = make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx)
	output:
		temp(make_wc_string(tsne_obj_pfx, tsne_obj_param, tsne_obj_sfx))
	threads: 4
	shell:
		"""
		module load R/3.6
		export SCIAD_FITSNE_DIR={fi_tsne_dir}
		Rscript {git_dir}/src/calculate_TSNE.R \
			{wildcards.method} {wildcards.dims} {wildcards.perplexity} {input} {output}
		"""

phate_obj_pfx ='seurat_obj/integrated/'
phate_obj_param = intg_obj_param 
phate_obj_sfx = 'phate.seuratV3.Rdata'
rule calculate_phate:
	input:
		obj = make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx)
	output:
		make_wc_string(phate_obj_pfx, phate_obj_param, phate_obj_sfx)
	threads: 16
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		Rscript {git_dir}/src/run_phate.R {input} {output}
		"""

clst_obj_pfx ='seurat_obj/integrated/'
clst_obj_param = intg_obj_param  + ['knn']
clst_obj_sfx = 'cluster.seuratV3.Rdata'		
rule calculate_cluster:
	input:
		obj = make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx)
	output:
		temp(make_wc_string(clst_obj_pfx, clst_obj_param, clst_obj_sfx))
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		export SCIAD_GIT_DIR={git_dir}
		Rscript {git_dir}/src/calculate_umap_and_cluster.R \
			{wildcards.method} {wildcards.dims} 1 1 {wildcards.knn} TRUE FALSE {input} {output}
		"""

extr_clst_pfx ='pipeline_data/cluster/'
extr_clst_param = clst_obj_param
extr_clst_clst_sfx = 'cluster.Rdata'
extr_clst_grf_sfx = 'graph.Rdata'

rule extract_cluster:
	input:
		make_wc_string(clst_obj_pfx, clst_obj_param, clst_obj_sfx)
	output:
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx),
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_grf_sfx )
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/extract_cluster.R {input} {output}
		"""


def set2mapper(set):
	if set == 'human':
		return 'references/gtf/hs-homo_sapiens_anno.gtf.gz'
	elif set == 'mouse':
		return 'references/gtf/mm-mus_musculus_anno.gtf.gz'
	elif set == 'chick':
		return 'references/gtf/gg-gallus_gallus_anno.gtf.gz'
	elif set == 'macaque':
		return  'references/gtf/hs-homo_sapiens_anno.gtf.gz' 
	else:
		return 'references/ENSG2gene_name.tsv.gz'


extr_umap_pfx ='pipeline_data/umap/'
extr_umap_param = umap_obj_param+['knn']
extr_umap_sfx = 'umap.Rdata'		
rule extract_umap:
	input:
		intg_seu_obj = make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx),
		umap_seu_obj = make_wc_string(umap_obj_pfx, umap_obj_param, umap_obj_sfx),
		cluster_rdata = make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx),
		cell_info_labeled = 'pipeline_data/cell_info/cell_info_labelled.Rdata',
		gene_id_mapper = lambda wildcards: set2mapper(wildcards.partition)
	output:
		umap_data =make_wc_string(extr_umap_pfx, extr_umap_param, extr_umap_sfx)
	params:
		rson = lambda wildcards, input, output: export_rule_info(input = dict(input), output=dict(output), wildcards = dict(wildcards))
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/extract_umap.R {params.rson} UMAP
		"""
extr_tsne_pfx ='pipeline_data/tsne/'
extr_tsne_param = tsne_obj_param
extr_tsne_sfx = 'tsne.Rdata'
rule extract_tsne:
	input:
		make_wc_string(tsne_obj_pfx, tsne_obj_param, tsne_obj_sfx),
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx),
		'pipeline_data/cell_info/cell_info_labelled.Rdata'
	output:
		make_wc_string(extr_tsne_pfx, extr_tsne_param, extr_tsne_sfx)
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/extract_umap.R \
			{input} {output} {wildcards.method} TSNE
		"""


pred_celltype_pfx ='pipeline_data/xgboost_predictions/'
pred_celltype_param =  umap_obj_param + ['knn']
pred_celltype_sfx = 'xgboostPredictions.Rdata'
umap_celltype_sfx = 'umapPredictions.Rdata'
rule celltype_predict_VS_xgboost:
	input:
		make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx),
		make_wc_string(extr_umap_pfx, extr_umap_param, extr_umap_sfx)
	output:
		make_wc_string(pred_celltype_pfx, pred_celltype_param, pred_celltype_sfx)
	params:
		umap_obj = make_wc_string(pred_celltype_pfx, pred_celltype_param, umap_celltype_sfx),
		model = make_wc_string(pred_celltype_pfx, pred_celltype_param, 'model')
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		export SCIAD_GIT_DIR={git_dir}
		export SCIAD_CONFIG={config_abspath}
		export SCIAD_WORKING_DIR={working_dir}
		Rscript {git_dir}/src/celltype_predict_wrapper.R {input} {output} {params.umap_obj} CellTypeID CellType {params.model}
		"""

plot_intr_umap_pfx ='pipeline_data/plots/'
plot_intr_umap_param = extr_umap_param
plot_intr_umap_sfx = 'umap.big_plot.png'

rule plot_integration:
	input:
		make_wc_string(extr_umap_pfx, extr_umap_param, extr_umap_sfx)
	output:
		make_wc_string(plot_intr_umap_pfx, plot_intr_umap_param, plot_intr_umap_sfx )
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/big_plots.R UMAP {input} {output}
		"""

plot_intr_tsne_pfx ='pipeline_data/plots/'
plot_intr_tsne_param = tsne_obj_param
plot_intr_tsne_sfx = 'tsne.big_plot.png'

rule plot_integration_tsne:
	input:
		make_wc_string(extr_tsne_pfx, extr_tsne_param, extr_tsne_sfx)
	output:
		make_wc_string(plot_intr_tsne_pfx, plot_intr_tsne_param, plot_intr_tsne_sfx)
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/big_plots.R TSNE {input} {output}
		"""

perf_met_pfx ='pipeline_data/perf_metrics/'
perf_met_param = extr_umap_param
perf_met_sfx = 'perf.Rdata'
parse_integration_config(file = config['integration_json'], 
	output_string =make_wc_string(perf_met_pfx, perf_met_param, perf_met_sfx),
	which_partitions = partitions_to_run )

rule perf_metrics:
	input:
		make_wc_string(extr_umap_pfx, extr_umap_param, extr_umap_sfx),
		make_wc_string(umap_obj_pfx, umap_obj_param, umap_obj_sfx),
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx)
	output:
		make_wc_string(perf_met_pfx, perf_met_param, perf_met_sfx)
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/perf_metrics.R {input} {output}
		"""
mk_h5ad_pfx ='anndata/'
mk_h5ad_param = extr_umap_param
mk_h5ad_sfx = '.h5ad'

rule make_h5ad_object:
	input:
		make_wc_string(extr_umap_pfx, extr_umap_param, extr_umap_sfx),
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx),
		make_wc_string(intg_obj_pfx, intg_obj_param, intg_obj_sfx),
		'pipeline_data/cell_info/cell_info_labelled.Rdata',
	output:
		make_wc_string(mk_h5ad_pfx, mk_h5ad_param, mk_h5ad_sfx)
	shell:
		"""
		export SCIAD_CONDA_DIR={conda_dir}
		module load R/3.6
		Rscript {git_dir}/src/seurat_to_h5ad.R {input} {output}
		"""

scIB_pfx ='pipeline_data/scIB/'
scIB_param = mk_h5ad_param
scIB_sfx = 'stats.csv'

rule scIB_stats:
	input:
		make_wc_string(h5ad_rawobj_pfx, h5ad_rawobj_param, h5ad_rawobj_sfx),
		make_wc_string(extr_clst_pfx, extr_clst_param, extr_clst_clst_sfx)
	output:
		make_wc_string(scIB_pfx, scIB_param, scIB_sfx)
	shell:
		"""
		module load R/3.6
		export SCIAD_CONDA_DIR={conda_dir}
		export SCIAD_GIT_DIR={git_dir}
		Rscript {git_dir}/src/scIB_stats.R {wildcards.method} {input} {wildcards.dims} {output}
		"""

rule merge_xgboost:
	input:
		parse_integration_config(file = config['integration_json'],
									output_string = make_wc_string(pred_celltype_pfx, pred_celltype_param, pred_celltype_sfx),
									which_partitions = scIB_partitions_to_run )
	output:
		'pipeline_data/results/merged_xgboost.Rdata'
	params: 
		rson = lambda wildcards, input, output: export_rule_info(input = dict(input), output=dict(output))
	shell:
		"""
		module load R/4.0.3
		Rscript {git_dir}/src/merge_xgboost.R {input}
		"""

# for input 
# perf_met_pfx ='pipeline_data/perf_metrics/'
# perf_met_param = clst_obj_param
# perf_met_sfx = 'perf.Rdata'

# scIB_pfx ='pipeline_data/scIB/'
# scIB_param = mk_h5ad_param
# scIB_sfx = 'stats.csv'

rule merge_stats:
	input:	
		perf_data =parse_integration_config(file = config['integration_json'], 
												output_string =make_wc_string(perf_met_pfx, perf_met_param, perf_met_sfx),
												which_partitions = partitions_to_run ),
		scib_data = parse_integration_config(file = config['integration_json'], 
											output_string =make_wc_string(scIB_pfx, scIB_param, scIB_sfx), 
											which_partitions = scIB_partitions_to_run ),
		plot_integration = parse_integration_config(file = config['integration_json'], 
													output_string = make_wc_string(plot_intr_umap_pfx, plot_intr_umap_param, plot_intr_umap_sfx ),
													which_partitions = partitions_to_run)
	output:
		merged_stats = 'pipeline_data/results/merged_stats.Rdata'
	params: 
		rson = lambda wildcards, input, output: export_rule_info(input = dict(input), output=dict(output))
	shell:
		"""
		module load R/3.6
		Rscript {git_dir}/src/optimal_params.R {params.rson}
		"""
